"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

var _loader = _interopRequireDefault(require("../../theme/loader"));

var _useDemoUrl = require("../../theme/hooks/useDemoUrl");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

var _default = api => {
  const demos = {}; // pass platform env

  if (process.env.PLATFORM_TYPE) {
    api.modifyDefaultConfig(memo => {
      memo.define = Object.assign(memo.define || {}, {
        'process.env.PLATFORM_TYPE': process.env.PLATFORM_TYPE
      });
      return memo;
    });
  } // write all demos into .umi dir


  api.onGenerateFiles( /*#__PURE__*/_asyncToGenerator(function* () {
    const tpl = _fs().default.readFileSync(_path().default.join(__dirname, 'demos.mst'), 'utf-8');

    const groups = {};
    const items = Object.keys(demos).map(uuid => {
      const componentName = demos[uuid].previewerProps.componentName;
      let demoComponent = demos[uuid].component; // dynamic import demos for performance if it is belongs to some component

      if (componentName) {
        groups[componentName] = (groups[componentName] || []).concat({
          uuid,
          component: demoComponent
        });
        demoComponent = `() => React.createElement(dynamic({
      loader: async function() {
        const { default: demos } = await import(/* webpackChunkName: "demos_${componentName}" */'./${componentName}');

        return demos['${uuid}'].component;
      },
      loading: () => null,
    }))`;
      }

      return {
        uuid,
        component: demoComponent,
        previewerProps: JSON.stringify(demos[uuid].previewerProps)
      };
    }); // write demos entry file

    api.writeTmpFile({
      path: 'dumi/demos/index.ts',
      content: api.utils.Mustache.render(tpl, {
        demos: items,
        isDemoEntry: true
      })
    }); // write demos which belongs to component into a single module for dynamic import

    Object.entries(groups).forEach(([componentName, groupDemos]) => {
      api.writeTmpFile({
        path: `dumi/demos/${componentName}.ts`,
        content: api.utils.Mustache.render(tpl, {
          demos: groupDemos
        })
      });
    });
  })); // register demo detections

  api.register({
    key: 'dumi.detectDemo',

    fn({
      uuid,
      code,
      previewerProps
    }) {
      demos[uuid] = {
        previewerProps,
        component: `React.memo(${code})`
      };
    }

  }); // add single demo render route

  api.modifyRoutes( /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (routes) {
      const theme = yield (0, _loader.default)();
      const prependRoutes = [{
        path: `/${(0, _useDemoUrl.getDemoRouteName)()}/:uuid`
      }];
      const Previewer = theme.builtins.concat(theme.fallbacks).find(({
        identifier
      }) => identifier === 'Previewer'); // both compatible with dumi 1.0 & Basement

      /* istanbul ignore else */

      if (prependRoutes[0].path !== '/_demos/:uuid') {
        prependRoutes.push({
          path: '/_demos/:uuid',
          redirect: '/~demos/:uuid'
        });
      }

      prependRoutes[0].wrappers = [theme.layoutPaths.demo].filter(Boolean);
      prependRoutes[0].component = `(props) => {
      const React = require('react');
      const renderArgs = require('${api.utils.winPath(_path().default.relative(_path().default.join(api.paths.absTmpPath, 'core'), _path().default.join(__dirname, './getDemoRenderArgs')))}').default(props);

      switch (renderArgs.length) {
        case 1:
          // render demo directly
          return renderArgs[0];

        case 2:
          // render demo with previewer
          return React.createElement(
            require('${Previewer.source}').default,
            renderArgs[0],
            renderArgs[1],
          );

        default:
          return \`Demo $\{uuid\} not found :(\`;
      }
    }`;
      routes.unshift(...prependRoutes);
      return routes;
    });

    return function (_x) {
      return _ref2.apply(this, arguments);
    };
  }());
};

exports.default = _default;