"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

function _react() {
  const data = _interopRequireDefault(require("react"));

  _react = function _react() {
    return data;
  };

  return data;
}

function _fs() {
  const data = _interopRequireDefault(require("fs"));

  _fs = function _fs() {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function _path() {
    return data;
  };

  return data;
}

function _utils() {
  const data = require("@umijs/utils");

  _utils = function _utils() {
    return data;
  };

  return data;
}

var _moduleResolver = require("../utils/moduleResolver");

var _context = _interopRequireDefault(require("../context"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

const THEME_PREFIX = 'dumi-theme-';
const LOCAL_THEME_PATH = '.dumi/theme';
const FALLBACK_THEME = `${THEME_PREFIX}default`;
const REQUIRED_THEME_BUILTINS = ['Previewer', 'SourceCode', 'Alert', 'Badge', 'Example'];
let cache;
/**
 * detect dumi theme in project dependencies
 */

function detectInstalledTheme() {
  const pkg = _context.default.umi.pkg || {};
  const deps = Object.assign({}, pkg.dependencies, pkg.devDependencies);
  return Object.keys(deps).filter(name => name.replace(/^@[\w-]+\//, '').startsWith(THEME_PREFIX));
}
/**
 * detect dumi theme in project dependencies
 */


function detectLocalTheme() {
  const detectPath = (0, _utils().winPath)(_path().default.join(_context.default.umi.cwd, LOCAL_THEME_PATH));
  return _fs().default.existsSync(detectPath) ? detectPath : null;
}
/**
 * detect dumi theme
 */


function detectTheme() {
  const localTheme = detectLocalTheme();
  return localTheme ? [localTheme] : detectInstalledTheme();
}

var _default = /*#__PURE__*/_asyncToGenerator(function* () {
  if (!cache || process.env.NODE_ENV === 'test') {
    const _detectTheme = detectTheme(),
          _detectTheme2 = _slicedToArray(_detectTheme, 1),
          _detectTheme2$ = _detectTheme2[0],
          name = _detectTheme2$ === void 0 ? process.env.DUMI_THEME || FALLBACK_THEME : _detectTheme2$;

    const theme = _path().default.isAbsolute(name) ? name : `${name}/src`;
    const modulePath = (0, _utils().winPath)(_path().default.resolve(_context.default.umi.paths.absNodeModulesPath, theme));

    const builtinPath = _path().default.join(modulePath, 'builtins');

    const components = _fs().default.existsSync(builtinPath) ? _fs().default.readdirSync(builtinPath).filter(file => /\.(j|t)sx?$/.test(file)).map(file => ({
      identifier: _path().default.parse(file).name,
      source: (0, _utils().winPath)(_path().default.join(theme, 'builtins', file))
    })) : [];
    const fallbacks = REQUIRED_THEME_BUILTINS.reduce((result, name) => {
      if (components.every(({
        identifier
      }) => identifier !== name)) {
        result.push({
          identifier: name,
          source: (0, _utils().winPath)(_path().default.join(FALLBACK_THEME, 'src', 'builtins', `${name}`))
        });
      }

      return result;
    }, []);
    const layoutPaths = {}; // outer layout: layout.tsx or layouts/index.tsx

    [(0, _utils().winPath)(_path().default.join(theme, 'layout')), (0, _utils().winPath)(_path().default.join(theme, 'layouts'))].some((layoutPath, i, outerLayoutPaths) => {
      try {
        (0, _moduleResolver.getModuleResolvePath)({
          basePath: _context.default.umi.paths.cwd,
          sourcePath: layoutPath,
          silent: true
        });
        layoutPaths._ = layoutPath;
        return true;
      } catch (err) {
        // fallback to default theme layout if cannot find any valid layout
        if (i === outerLayoutPaths.length - 1) {
          layoutPaths._ = (0, _utils().winPath)(_path().default.join(FALLBACK_THEME, 'src', 'layout'));
        }
      }
    }); // demo layout

    try {
      layoutPaths.demo = (0, _utils().winPath)(_path().default.join(theme, 'layouts', 'demo'));
      (0, _moduleResolver.getModuleResolvePath)({
        basePath: _context.default.umi.paths.cwd,
        sourcePath: layoutPaths.demo,
        silent: true
      });
    } catch (err) {
      layoutPaths.demo = null;
    }

    cache = yield _context.default.umi.applyPlugins({
      key: 'dumi.modifyThemeResolved',
      type: _context.default.umi.ApplyPluginsType.modify,
      initialValue: {
        name: theme,
        modulePath,
        builtins: components,
        fallbacks,
        layoutPaths
      }
    });
  }

  return cache;
});

exports.default = _default;